// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frontend.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frontend_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frontend_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frontend_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frontend_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_frontend_2eproto;
class B2FChangeAddressResp;
struct B2FChangeAddressRespDefaultTypeInternal;
extern B2FChangeAddressRespDefaultTypeInternal _B2FChangeAddressResp_default_instance_;
class F2BChangeAddress;
struct F2BChangeAddressDefaultTypeInternal;
extern F2BChangeAddressDefaultTypeInternal _F2BChangeAddress_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::B2FChangeAddressResp* Arena::CreateMaybeMessage<::B2FChangeAddressResp>(Arena*);
template<> ::F2BChangeAddress* Arena::CreateMaybeMessage<::F2BChangeAddress>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class F2BChangeAddress final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:F2BChangeAddress) */ {
 public:
  inline F2BChangeAddress() : F2BChangeAddress(nullptr) {}
  ~F2BChangeAddress() override;
  explicit PROTOBUF_CONSTEXPR F2BChangeAddress(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  F2BChangeAddress(const F2BChangeAddress& from);
  F2BChangeAddress(F2BChangeAddress&& from) noexcept
    : F2BChangeAddress() {
    *this = ::std::move(from);
  }

  inline F2BChangeAddress& operator=(const F2BChangeAddress& from) {
    CopyFrom(from);
    return *this;
  }
  inline F2BChangeAddress& operator=(F2BChangeAddress&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const F2BChangeAddress& default_instance() {
    return *internal_default_instance();
  }
  static inline const F2BChangeAddress* internal_default_instance() {
    return reinterpret_cast<const F2BChangeAddress*>(
               &_F2BChangeAddress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(F2BChangeAddress& a, F2BChangeAddress& b) {
    a.Swap(&b);
  }
  inline void Swap(F2BChangeAddress* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(F2BChangeAddress* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  F2BChangeAddress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<F2BChangeAddress>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const F2BChangeAddress& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const F2BChangeAddress& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(F2BChangeAddress* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "F2BChangeAddress";
  }
  protected:
  explicit F2BChangeAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSeqnumFieldNumber = 1,
    kShipidFieldNumber = 2,
    kXFieldNumber = 3,
    kYFieldNumber = 4,
  };
  // required int64 seqnum = 1;
  bool has_seqnum() const;
  private:
  bool _internal_has_seqnum() const;
  public:
  void clear_seqnum();
  int64_t seqnum() const;
  void set_seqnum(int64_t value);
  private:
  int64_t _internal_seqnum() const;
  void _internal_set_seqnum(int64_t value);
  public:

  // required int64 shipid = 2;
  bool has_shipid() const;
  private:
  bool _internal_has_shipid() const;
  public:
  void clear_shipid();
  int64_t shipid() const;
  void set_shipid(int64_t value);
  private:
  int64_t _internal_shipid() const;
  void _internal_set_shipid(int64_t value);
  public:

  // required int32 x = 3;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // required int32 y = 4;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:F2BChangeAddress)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int64_t seqnum_;
    int64_t shipid_;
    int32_t x_;
    int32_t y_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_frontend_2eproto;
};
// -------------------------------------------------------------------

class B2FChangeAddressResp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:B2FChangeAddressResp) */ {
 public:
  inline B2FChangeAddressResp() : B2FChangeAddressResp(nullptr) {}
  ~B2FChangeAddressResp() override;
  explicit PROTOBUF_CONSTEXPR B2FChangeAddressResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  B2FChangeAddressResp(const B2FChangeAddressResp& from);
  B2FChangeAddressResp(B2FChangeAddressResp&& from) noexcept
    : B2FChangeAddressResp() {
    *this = ::std::move(from);
  }

  inline B2FChangeAddressResp& operator=(const B2FChangeAddressResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline B2FChangeAddressResp& operator=(B2FChangeAddressResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const B2FChangeAddressResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const B2FChangeAddressResp* internal_default_instance() {
    return reinterpret_cast<const B2FChangeAddressResp*>(
               &_B2FChangeAddressResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(B2FChangeAddressResp& a, B2FChangeAddressResp& b) {
    a.Swap(&b);
  }
  inline void Swap(B2FChangeAddressResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(B2FChangeAddressResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  B2FChangeAddressResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<B2FChangeAddressResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const B2FChangeAddressResp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const B2FChangeAddressResp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(B2FChangeAddressResp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "B2FChangeAddressResp";
  }
  protected:
  explicit B2FChangeAddressResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSeqnumFieldNumber = 1,
    kShipidFieldNumber = 2,
    kResultFieldNumber = 3,
  };
  // required int64 seqnum = 1;
  bool has_seqnum() const;
  private:
  bool _internal_has_seqnum() const;
  public:
  void clear_seqnum();
  int64_t seqnum() const;
  void set_seqnum(int64_t value);
  private:
  int64_t _internal_seqnum() const;
  void _internal_set_seqnum(int64_t value);
  public:

  // required int64 shipid = 2;
  bool has_shipid() const;
  private:
  bool _internal_has_shipid() const;
  public:
  void clear_shipid();
  int64_t shipid() const;
  void set_shipid(int64_t value);
  private:
  int64_t _internal_shipid() const;
  void _internal_set_shipid(int64_t value);
  public:

  // required int32 result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  int32_t result() const;
  void set_result(int32_t value);
  private:
  int32_t _internal_result() const;
  void _internal_set_result(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:B2FChangeAddressResp)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int64_t seqnum_;
    int64_t shipid_;
    int32_t result_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_frontend_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// F2BChangeAddress

// required int64 seqnum = 1;
inline bool F2BChangeAddress::_internal_has_seqnum() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool F2BChangeAddress::has_seqnum() const {
  return _internal_has_seqnum();
}
inline void F2BChangeAddress::clear_seqnum() {
  _impl_.seqnum_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int64_t F2BChangeAddress::_internal_seqnum() const {
  return _impl_.seqnum_;
}
inline int64_t F2BChangeAddress::seqnum() const {
  // @@protoc_insertion_point(field_get:F2BChangeAddress.seqnum)
  return _internal_seqnum();
}
inline void F2BChangeAddress::_internal_set_seqnum(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.seqnum_ = value;
}
inline void F2BChangeAddress::set_seqnum(int64_t value) {
  _internal_set_seqnum(value);
  // @@protoc_insertion_point(field_set:F2BChangeAddress.seqnum)
}

// required int64 shipid = 2;
inline bool F2BChangeAddress::_internal_has_shipid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool F2BChangeAddress::has_shipid() const {
  return _internal_has_shipid();
}
inline void F2BChangeAddress::clear_shipid() {
  _impl_.shipid_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int64_t F2BChangeAddress::_internal_shipid() const {
  return _impl_.shipid_;
}
inline int64_t F2BChangeAddress::shipid() const {
  // @@protoc_insertion_point(field_get:F2BChangeAddress.shipid)
  return _internal_shipid();
}
inline void F2BChangeAddress::_internal_set_shipid(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.shipid_ = value;
}
inline void F2BChangeAddress::set_shipid(int64_t value) {
  _internal_set_shipid(value);
  // @@protoc_insertion_point(field_set:F2BChangeAddress.shipid)
}

// required int32 x = 3;
inline bool F2BChangeAddress::_internal_has_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool F2BChangeAddress::has_x() const {
  return _internal_has_x();
}
inline void F2BChangeAddress::clear_x() {
  _impl_.x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t F2BChangeAddress::_internal_x() const {
  return _impl_.x_;
}
inline int32_t F2BChangeAddress::x() const {
  // @@protoc_insertion_point(field_get:F2BChangeAddress.x)
  return _internal_x();
}
inline void F2BChangeAddress::_internal_set_x(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.x_ = value;
}
inline void F2BChangeAddress::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:F2BChangeAddress.x)
}

// required int32 y = 4;
inline bool F2BChangeAddress::_internal_has_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool F2BChangeAddress::has_y() const {
  return _internal_has_y();
}
inline void F2BChangeAddress::clear_y() {
  _impl_.y_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t F2BChangeAddress::_internal_y() const {
  return _impl_.y_;
}
inline int32_t F2BChangeAddress::y() const {
  // @@protoc_insertion_point(field_get:F2BChangeAddress.y)
  return _internal_y();
}
inline void F2BChangeAddress::_internal_set_y(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.y_ = value;
}
inline void F2BChangeAddress::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:F2BChangeAddress.y)
}

// -------------------------------------------------------------------

// B2FChangeAddressResp

// required int64 seqnum = 1;
inline bool B2FChangeAddressResp::_internal_has_seqnum() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool B2FChangeAddressResp::has_seqnum() const {
  return _internal_has_seqnum();
}
inline void B2FChangeAddressResp::clear_seqnum() {
  _impl_.seqnum_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int64_t B2FChangeAddressResp::_internal_seqnum() const {
  return _impl_.seqnum_;
}
inline int64_t B2FChangeAddressResp::seqnum() const {
  // @@protoc_insertion_point(field_get:B2FChangeAddressResp.seqnum)
  return _internal_seqnum();
}
inline void B2FChangeAddressResp::_internal_set_seqnum(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.seqnum_ = value;
}
inline void B2FChangeAddressResp::set_seqnum(int64_t value) {
  _internal_set_seqnum(value);
  // @@protoc_insertion_point(field_set:B2FChangeAddressResp.seqnum)
}

// required int64 shipid = 2;
inline bool B2FChangeAddressResp::_internal_has_shipid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool B2FChangeAddressResp::has_shipid() const {
  return _internal_has_shipid();
}
inline void B2FChangeAddressResp::clear_shipid() {
  _impl_.shipid_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int64_t B2FChangeAddressResp::_internal_shipid() const {
  return _impl_.shipid_;
}
inline int64_t B2FChangeAddressResp::shipid() const {
  // @@protoc_insertion_point(field_get:B2FChangeAddressResp.shipid)
  return _internal_shipid();
}
inline void B2FChangeAddressResp::_internal_set_shipid(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.shipid_ = value;
}
inline void B2FChangeAddressResp::set_shipid(int64_t value) {
  _internal_set_shipid(value);
  // @@protoc_insertion_point(field_set:B2FChangeAddressResp.shipid)
}

// required int32 result = 3;
inline bool B2FChangeAddressResp::_internal_has_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool B2FChangeAddressResp::has_result() const {
  return _internal_has_result();
}
inline void B2FChangeAddressResp::clear_result() {
  _impl_.result_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t B2FChangeAddressResp::_internal_result() const {
  return _impl_.result_;
}
inline int32_t B2FChangeAddressResp::result() const {
  // @@protoc_insertion_point(field_get:B2FChangeAddressResp.result)
  return _internal_result();
}
inline void B2FChangeAddressResp::_internal_set_result(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.result_ = value;
}
inline void B2FChangeAddressResp::set_result(int32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:B2FChangeAddressResp.result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frontend_2eproto
